syntax = "proto2";

package chess;

option java_package = "com.gilran.chess";
option java_outer_classname = "Proto";

enum Status {
  OK = 0;
  INVALID_REQUEST = 1;
  INVALID_OR_EXPIRED_SESSION_TOKEN = 2;
  INVALID_GAME_ID = 3;
  INVALID_MOVE = 4;
  NOT_YOUR_TURN = 5;
  ILLEGAL_MOVE = 6;
}

// The position status.
enum GameStatus {
  // The game is going on and it is white's turn.
  WHITE_TO_MOVE = 0;
  // The game is going on and it is black's turn.
  BLACK_TO_MOVE = 1;
  // The game is going on and it is white's turn; and white is checked.
  WHITE_CHECKED = 2;
  // The game is going on and it is black's turn; and black is checked.
  BLACK_CHECKED = 3;
  // Black was checkmated - white won.
  BLACK_CHECKMATED = 4;
  // Black resigned - white won.
  BLACK_RESIGNED = 5;
  // Black's time ran out - white won.
  BLACK_CLOCK_EXPIRED = 6;
  // White was checkmated - black won.
  WHITE_CHECKMATED = 7;
  // White resigned - black won.
  WHITE_RESIGNED = 8;
  // White's time ran out - black won.
  WHITE_CLOCK_EXPIRED = 9;
  // Black was stalemated - draw.
  BLACK_STALEMATED = 10;
  // White was stalemated - draw.
  WHITE_STALEMATED = 11;
  // Insufficient mating material - draw.
  INSUFFICIENT_MATERIAL = 12;
  // Halfmoves clock expired - draw.
  HALFMOVE_CLOCK_EXPIRED = 13;
  // Threefold repetition - draw.
  THREEFOLD_REPETITION = 14;
  // The players agreed to draw.
  DRAW_BY_AGREEMENT = 15;
}

// An error response.
// This message can be used instead of any other message that has a Status
// field, and all other fields are optional (all responses should comply).
message ErrorResponse {
  optional Status status = 1;
}

// A request to login and start a new session.
message LoginRequest {
  required string username = 1;
}

// The response for a LoginRequest.
message LoginResponse {
  optional Status status = 1;
  optional string session_token = 2;
}

// A request to seek an oponent and start a game.
message SeekRequest {
  required string session_token = 1;
}

// The response for a SeekRequest.
message SeekResponse {
  optional Status status = 1;
  optional string game_id = 2;
  optional string white = 3;
  optional string black = 4;
}

// A message representing a move.
message MoveProto {
  required string from = 1;
  required string to = 2;
}

// A message for the game information.
// The GameInfo message is also used as the request for methods that don't
// require any additional info.
message GameInfo {
  required string session_token = 1;
  required string game_id = 2;
}

// MoveRequest is used to make a move in the game.
message MoveRequest {
  required GameInfo game_info = 1;
  required MoveProto move = 2;
}

// The response for a a MoveRequest.
message MoveResponse {
  optional Status status = 1;
}

// An event that happened in the game.
message GameEvent {
  enum Type {
    MOVE_MADE = 0;
    GAME_ENDED = 1;
    WHITE_OFFERED_DRAW = 2;
    BLACK_OFFERED_DRAW = 3;
    DRAW_OFFER_DECLINED = 4;
    DRAW_OFFER_WITHDRAWN = 5;
  }
  required int32 serial_number = 1;
  required Type type = 2;
  required GameStatus status = 3;
  repeated MoveProto move = 4;
}

// A request for new game events. All game events with serial number greater
// than or equal to the min_event_number will be returned.
message EventsRequest {
  required GameInfo game_info = 1;
  required int32 min_event_number = 2;
}
// The response for an EventsRequest.
message EventsResponse {
  optional Status status = 1;
  repeated GameEvent event = 2;
}
